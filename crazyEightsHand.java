

import java.util.*;

public class crazyEightsHand {
	public ArrayList<Card> hand = new ArrayList<Card>();
	Scanner scan = new Scanner(System.in);

	// This instantiates a hand of cards, taking in the card array that will be
	// generated by the deal method
	public crazyEightsHand(Card[] cards) {
		for (Card a : cards) {
			hand.add(a);
		}

	}

	// returns true if there are eligible plays, false otherwise
	//Checks if the ranks are equivalent, or if any card has the same suit
	//To add: Check if they have an 8
	public boolean canPlay(Card other) {
		
		for (Card a : hand) {
			if (a.getRank() == other.getRank() || a.getSuit() == other.getSuit() || a.getRank() == 8) {
				return true;
			}
			
			
		}
		return false;
	}

	/* This method "plays" a card
	 * This means it returns the card played from the hand
	 * If nothing is played, it returns the card that was already there
	 * Takes in the deck that is being used, along with the current card
	 */
	

	public Card play(Card other, Deck a) {
		System.out.println("The current card is: " + other);
		System.out.println("Your hand is: ");
		int count = 1;
		//This displays the players hand so that they know their options
		for (Card c : hand) {
			System.out.println("Card " + count + ": " + c.toString());
			count++;

		}
		//This catches if there are no eligible plays, and draws a card automatically
		//If the deck is empty, the turn is simply ended
		if (!canPlay(other)) {
			if(a.isEmpty()) {
				System.out.println("You have no eligible moves. The deck is empty, so you are skipped.");
			}
			else {
				System.out.println("You have no eligible moves. Drawing a card");
				hand.add(a.deal());
				
			}
			// returns other so that the newest card isn't updated
			return other;
			
		} else {
			
			//This boolean is used to determine if the chosen card is playable
			boolean valid = false;
			
			//Represents the chosen card
			Card newCard = other;

			while (valid == false) {
				System.out.println("Enter the number of the card you will play, or 0 to draw.");
				int index = Integer.parseInt(scan.nextLine()) - 1;
				//checks if the player wants to draw a card
				if(index == -1) {
					if(a.isEmpty()) {
						System.out.println("The deck is empty, can't draw.");
					}
					else {
						System.out.println("Drawing a card");
						Card dealt = a.deal();
						hand.add(dealt);
						System.out.println("Drew " + dealt);
						valid = true;
					}
					
				}
				//Checks to see if the index is within the hand
				else if(index < -1 || index >= hand.size()) {
					System.out.println("That is not a valid card in your hand.");
				}
				else if(hand.get(index).getRank() == 8) {
					hand.remove(index);
					boolean suitChosen = false;
					System.out.println("Wild card! Enter the first initial of the suit you'd like to make it.");
					String suit = scan.nextLine().substring(0);
					if(((suit.toLowerCase().contentEquals("s") ||suit.toLowerCase().contentEquals("h") || suit.toLowerCase().contentEquals("c") || suit.toLowerCase().contentEquals("d")))){
						suitChosen = true;
					}
					while(suitChosen == false) {
						System.out.println("Invalid suit entered, please enter s, d, c, or h");
						suit = scan.nextLine().substring(0);
						if(((suit.toLowerCase().contentEquals("s") ||suit.toLowerCase().contentEquals("h") || suit.toLowerCase().contentEquals("c") || suit.toLowerCase().contentEquals("d")))){
							suitChosen = true;
						}
						else {
							suitChosen = false;
						}
					}
					
					valid = true;
					
					if(suit.contentEquals("s")) {
						newCard = new Card(Suit.spade, 8);
					}
					
					else if(suit.contentEquals("c")) {
						newCard = new Card(Suit.club, 8);
					}
					
					else if(suit.contentEquals("d")) {
						newCard = new Card(Suit.diamond, 8);
					}
					
					else if(suit.contentEquals("h")) {
						newCard = new Card(Suit.heart, 8);
					}
					
					
					
				}
				//If the index is in the hand and if so, plays it
				else if (index < hand.size() && (hand.get(index).getRank() == other.getRank()
						|| hand.get(index).getSuit() == other.getSuit())) {
					//valid is made true so that the loop ends
					valid = true;
					//newCard is made the chosen card, and that card is removed from the hand
					newCard = hand.remove(index);
					
				}
				
				else {
					System.out.println("Cannot play that card");
				}

			}
			//returns the chosen card
			return newCard;
		}

	}
	
	/*
	 * This method's purpose is to check if a hand has "won" yet for purpose of the game class
	 * The condition for winning is an empty hand, or 0
	 */
	public boolean win() {
		if(hand.size() == 0) {
			return true;
		}
		else {
			return false;
		}
	}

}
